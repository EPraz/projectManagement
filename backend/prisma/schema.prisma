// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

///////////////////////////////////////////////////////
///////////////////////////////////////////////////////
model Project {
  id              String          @id @default(uuid())
  title           String
  description     String?
  createdBy       String
  updatedBy       String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  epics           Epic[]
  tickets         Ticket[]
  users           User[]
  sprints         Sprint[]
  ticketStatuses  TicketStatus[]
  taskStatuses    TaskStatus[]
  epicStatuses    EpicStatus[]
  featureStatuses FeatureStatus[]
}

model Epic {
  id                 String      @id @default(uuid())
  title              String
  description        String?
  acceptanceCriteria String?
  discussion         String?
  createdBy          String
  updatedBy          String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  statusId           String?
  status             EpicStatus? @relation(fields: [statusId], references: [id])
  projectId          String
  project            Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  features           Feature[]
}

model Feature {
  id                 String         @id @default(uuid())
  title              String
  description        String?
  acceptanceCriteria String?
  discussion         String?
  createdBy          String
  updatedBy          String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  statusId           String?
  status             FeatureStatus? @relation(fields: [statusId], references: [id])
  epicId             String
  epic               Epic           @relation(fields: [epicId], references: [id], onDelete: Cascade)
  tickets            Ticket[]
}

model Ticket {
  id                   Int               @id @default(autoincrement())
  title                String
  description          String?
  acceptanceCriteria   String?
  discussion           String?
  createdBy            String
  updatedBy            String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  order                Int               @default(0)
  statusId             String?
  status               TicketStatus?     @relation(fields: [statusId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  featureId            String?
  feature              Feature?          @relation(fields: [featureId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  projectId            String?
  project              Project?          @relation(fields: [projectId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tasks                Task[]
  sprintId             String?
  sprint               Sprint?           @relation(fields: [sprintId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  type                 TicketType        @default(PRODUCT_BACKLOG_ITEM)
  tags                 Tag[]
  priority             TicketPriority?   @default(LOW)
  assignedTo           String?
  assignedUser         User?             @relation(fields: [assignedTo], references: [id], onUpdate: Cascade, onDelete: SetNull)
  estimatedHours       Float?
  remainingHours       Float?
  completedHours       Float?
  storyPoints          Int?
  dueDate              DateTime?
  isBlocked            Boolean           @default(false)
  blockedBy            Int?
  blockingTicket       Ticket?           @relation("Blocking", fields: [blockedBy], references: [id], onDelete: SetNull)
  blockedTickets       Ticket[]          @relation("Blocking")
  additionalDetails    String?
  designInformation    String?
  notes                String?
  pairProgrammingUsers PairProgramming[]
}

model Task {
  id                 Int         @id @default(autoincrement())
  title              String
  description        String?
  acceptanceCriteria String?
  discussion         String?
  createdBy          String
  updatedBy          String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  statusId           String?
  status             TaskStatus? @relation(fields: [statusId], references: [id])
  ticketId           Int
  ticket             Ticket      @relation(fields: [ticketId], references: [id], onDelete: Cascade)
}

model Sprint {
  id         String       @id @default(uuid())
  name       String
  startDate  DateTime
  endDate    DateTime
  projectId  String
  project    Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tickets    Ticket[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  sprintGoal SprintGoal[]
}

///////////////////////////////////////////////////////
///////////////////////////////////////////////////////
model User {
  id              String            @id @default(uuid())
  name            String
  email           String            @unique
  password        String
  role            Role              @default(DEVELOPER)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  tickets         Ticket[]
  pairProgramming PairProgramming[]
  isVerified      Boolean           @default(false)
  refreshToken    String?
  projects        Project[]
}

model PairProgramming {
  id       String @id @default(uuid())
  ticketId Int
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
}

///////////////////////////////////////////////////////
///////////////////////////////////////////////////////

model EpicStatus {
  id        String   @id @default(uuid())
  name      String
  position  Int      @default(0)
  color     String   @default("#000000")
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  epics     Epic[]
}

model FeatureStatus {
  id        String    @id @default(uuid())
  name      String
  position  Int       @default(0)
  color     String    @default("#000000")
  projectId String?
  project   Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  features  Feature[]
}

model TicketStatus {
  id        String   @id @default(uuid())
  name      String
  position  Int      @default(0)
  color     String   @default("#000000")
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tickets   Ticket[]
}

model TaskStatus {
  id        String   @id @default(uuid())
  name      String
  position  Int      @default(0)
  color     String   @default("#000000")
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks     Task[]
}

model Tag {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  color   String   @default("#000000")
  tickets Ticket[]
}

model SprintGoal {
  id          String     @id @default(uuid())
  sprintId    String
  sprint      Sprint     @relation(fields: [sprintId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  title       String
  description String?
  progress    Int        @default(0) // Porcentaje de progreso
  goalsStatus GoalStatus @default(IN_PROGRESS)
  goalTask    GoalTask[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model GoalTask {
  id        String     @id @default(uuid())
  goalId    String
  goal      SprintGoal @relation(fields: [goalId], references: [id], onDelete: Cascade)
  title     String
  completed Boolean    @default(false)
}

///////////////////////////////////////////////////////
///////////////////////////////////////////////////////

enum Role {
  ADMIN
  PROJECT_MANAGER
  PRODUCT_OWNER
  BUSINESS_ANALYST
  DEVELOPER
  QUALITY_ASSURANCE
}

enum TicketType {
  PRODUCT_BACKLOG_ITEM
  BUG_TICKET
  TECHNICAL_TICKET
  SPIKE
  CHANGE_REQUEST
  DEPLOYMENT
  CODE_REVIEW
  DOCUMENTATION
  HOTFIX
  PERFORMANCE_IMPROVEMENT
  UI_UX_IMPROVEMENT
  SECURITY_FIX
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum GoalStatus {
  COMPLETED
  IN_PROGRESS
  AT_RISK
}
